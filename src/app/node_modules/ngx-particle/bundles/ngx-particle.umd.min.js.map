{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-particle/lib/particles.component.ts","ng://ngx-particle/lib/models/utils.ts","ng://ngx-particle/lib/models/particleInteraction.ts","ng://ngx-particle/lib/models/particle.ts","ng://ngx-particle/lib/models/particlesManager.ts","ng://ngx-particle/lib/models/canvasManager.ts","ng://ngx-particle/lib/particles.directive.ts","ng://ngx-particle/lib/particles.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","ParticlesComponent","this","width","height","style","Input","Component","selector","template","hexToRgb","hex","replace","m","g","b","result","exec","parseInt","clamp","number","min","max","Math","isInArray","value","array","indexOf","deepExtend","destination","source","property","constructor","getColor","colorObject","color","Array","selectedColor","floor","random","rgb","undefined","h","s","l","hsl","getDefaultParams","particles","density","enable","value_area","shape","type","stroke","polygon","nb_sides","image","src","opacity","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","shadow","blur","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","mouse","retina_detect","loadImg","params","tmp","img_error","img_type","xhr_1","XMLHttpRequest","open","onreadystatechange","data","readyState","status","source_svg","currentTarget","response","checkAnimFrame","requestAnimationFrame","send","img_1","Image","addEventListener","img_obj","cancelAnimationFrame","createSvgImg","particle","coloredSvgXml","color_value","_a","_b","svg","Blob","DOMURL","window","URL","url","createObjectURL","img","obj","loaded","revokeObjectURL","count_svg","ParticleInteraction","prototype","linkParticles","p1","p2","canvasParams","dx","x","dy","y","dist","sqrt","opacity_line","color_line","color_rgb_line","ctx","save","strokeStyle","lineWidth","beginPath","shadowBlur","shadowColor","moveTo","lineTo","closePath","restore","attractParticles","ax","ay","vx","vy","bounceParticles","radius","Particle","_canvasParams","_params","_tmpParams","position","_setupSize","_setupPosition","_setupColor","_setupOpacity","_setupAnimation","size_status","vs","_checkOverlap","_this","forEach","opacity_status","vo","velbase","vx_i","vy_i","shape_type","shape_selected","sh","ratio","pushing","_drawShape","startX","startY","sideLength","sideCountNumerator","sideCountDenominator","sideCount","decimalSides","interiorAngleDegrees","interiorAngle","PI","translate","rotate","fill","draw","radius_bubble","opacity_bubble","fillStyle","arc","rect","drawImage","ParticlesManager","_interaction","particlesCreate","_particlesUpdate","ms","new_pos","x_left","x_right","y_top","y_bottom","_grabParticle","_bubbleParticle","_repulseParticle","j","link","particlesDraw","clearRect","particlesEmpty","removeParticles","nb","splice","pushParticles","pos","pos_x","pos_y","dx_mouse","dy_mouse","dist_mouse","init","dif","bubble_clicking","click_pos_x","click_pos_y","dist_mouse_1","time_spent_1","Date","getTime","click_time","bubble_duration_end","process","bubble_param","particles_param","p_obj_bubble","p_obj","id","normVec","repulseRadius","repulseFactor","pow","repulse_finish","repulse_count","repulse_clicking","dx_1","dy_1","force_1","f","atan2","cos","sin","CanvasManager","_onWindowResize","bind","_retinaInit","_canvasSize","particlesManager","_densityAutoParticles","cancelAnimation","drawAnimFrame","area","el","retina","pxratio","nb_particles","missing_particles","abs","devicePixelRatio","offsetWidth","offsetHeight","size_value","size_anim_speed","move_speed","line_linked_distance","mode_grab_distance","mode_bubble_distance","line_linked_width","mode_bubble_size","mode_repulse_distance","_canvasClear","_canvasPaint","fillRect","ParticlesDirective","defaultParams","ngOnDestroy","_canvasManager","ngAfterViewInit","nativeElement","getContext","substr","onMouseMove","event","clientX","clientY","offsetX","offsetY","onMouseLeave","onClick","setTimeout","ElementRef","HostListener","Directive","ParticlesModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { IParams } from './models';\r\n\r\n@Component({\r\n    selector: 'particles',\r\n    template: `\r\n        <div [ngStyle]=\"style\" class=\"particles-container\">\r\n            <canvas d-particles [params]=\"params\" [style.width.%]=\"width\" [style.height.%]=\"height\"></canvas>\r\n        </div>\r\n    `\r\n})\r\nexport class ParticlesComponent {\r\n\r\n    @Input() width: number = 100;\r\n    @Input() height: number = 100;\r\n    @Input() params: IParams;\r\n    @Input() style: Object = {};\r\n\r\n    constructor() { }\r\n}","import { IParams, ITmpParams } from \"./interfaces\";\r\nimport { Particle } from \"./particle\";\r\n\r\nexport type RGB = {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n};\r\n\r\nexport type HSL = {\r\n\th: number;\r\n\ts: number;\r\n\tl: number;\r\n};\r\n\r\nexport const hexToRgb: (hex: string) => RGB =\r\n    (hex) => {\r\n        let shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        hex = hex.replace(shorthandRegex, (m, r, g, b) => {\r\n            return r + r + g + g + b + b;\r\n        });\r\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    };\r\n\r\nexport const clamp: (number: number, min: number, max: number) => number =\r\n    (number, min, max) => {\r\n        return Math.min(Math.max(number, min), max);\r\n    };\r\n\r\nexport const isInArray: (value: any, array: any) => boolean =\r\n    (value, array) => {\r\n        return array.indexOf(value) > -1;\r\n    };\r\n\r\nexport const deepExtend: (destination: any, source: any) => any =\r\n    function (destination, source) {\r\n        for (let property in source) {\r\n            if (source[property] &&\r\n                source[property].constructor &&\r\n                source[property].constructor === Object) {\r\n                destination[property] = destination[property] || {};\r\n                deepExtend(destination[property], source[property]);\r\n            } else {\r\n                destination[property] = source[property];\r\n            }\r\n        }\r\n        return destination;\r\n    };\r\n\r\nexport const getColor: (colorObject: any) => { rgb?: RGB, hsl?: HSL } =\r\n    (colorObject) => {\r\n        let color: { rgb?: RGB, hsl?: HSL } = {};\r\n        if (typeof (colorObject) == 'object') {\r\n            if (colorObject instanceof Array) {\r\n                let selectedColor: string = colorObject[Math.floor(Math.random() * colorObject.length)];\r\n                color.rgb = hexToRgb(selectedColor);\r\n            } else {\r\n                let { r, g, b } = colorObject;\r\n                if (r !== undefined && g !== undefined && b !== undefined) {\r\n                    color.rgb = { r, g, b };\r\n                } else {\r\n                    let { h, s, l } = colorObject;\r\n                    if (h !== undefined && g !== undefined && b !== undefined) {\r\n                        color.hsl = { h, s, l };\r\n                    }\r\n                }\r\n            }\r\n        } else if (colorObject == 'random') {\r\n            color.rgb = {\r\n                r: (Math.floor(Math.random() * 255) + 1),\r\n                g: (Math.floor(Math.random() * 255) + 1),\r\n                b: (Math.floor(Math.random() * 255) + 1)\r\n            }\r\n        } else if (typeof (colorObject) == 'string') {\r\n            color.rgb = hexToRgb(colorObject);\r\n        }\r\n        return color;\r\n    };\r\n\r\nexport const getDefaultParams: () => IParams =\r\n    () => {\r\n        return {\r\n            particles: {\r\n                number: {\r\n                    value: 100,\r\n                    density: {\r\n                        enable: true,\r\n                        value_area: 800\r\n                    }\r\n                },\r\n                color: {\r\n                    value: '#FFF'\r\n                },\r\n                shape: {\r\n                    type: 'circle',\r\n                    stroke: {\r\n                        width: 0,\r\n                        color: '#000000'\r\n                    },\r\n                    polygon: {\r\n                        nb_sides: 5\r\n                    },\r\n                    image: {\r\n                        src: '',\r\n                        width: 100,\r\n                        height: 100\r\n                    }\r\n                },\r\n                opacity: {\r\n                    value: 0.5,\r\n                    random: false,\r\n                    anim: {\r\n                        enable: true,\r\n                        speed: 1,\r\n                        opacity_min: 0.1,\r\n                        sync: false\r\n                    }\r\n                },\r\n                size: {\r\n                    value: 3,\r\n                    random: true,\r\n                    anim: {\r\n                        enable: false,\r\n                        speed: 40,\r\n                        size_min: 0,\r\n                        sync: false\r\n                    }\r\n                },\r\n                line_linked: {\r\n                    enable: true,\r\n                    distance: 150,\r\n                    color: '#FFF',\r\n                    opacity: 0.6,\r\n                    width: 1,\r\n                    shadow: {\r\n                        enable: false,\r\n                        blur: 5,\r\n                        color: 'lime'\r\n                    }\r\n                },\r\n                move: {\r\n                    enable: true,\r\n                    speed: 3,\r\n                    direction: 'none',\r\n                    random: false,\r\n                    straight: false,\r\n                    out_mode: 'out',\r\n                    bounce: true,\r\n                    attract: {\r\n                        enable: false,\r\n                        rotateX: 3000,\r\n                        rotateY: 3000\r\n                    }\r\n                },\r\n                array: []\r\n            },\r\n            interactivity: {\r\n                detect_on: 'canvas',\r\n                events: {\r\n                    onhover: {\r\n                        enable: true,\r\n                        mode: 'grab'\r\n                    },\r\n                    onclick: {\r\n                        enable: true,\r\n                        mode: 'push'\r\n                    },\r\n                    resize: true\r\n                },\r\n                modes: {\r\n                    grab: {\r\n                        distance: 200,\r\n                        line_linked: {\r\n                            opacity: 1\r\n                        }\r\n                    },\r\n                    bubble: {\r\n                        distance: 200,\r\n                        size: 80,\r\n                        duration: 0.4\r\n                    },\r\n                    repulse: {\r\n                        distance: 200,\r\n                        duration: 0.4\r\n                    },\r\n                    push: {\r\n                        particles_nb: 4\r\n                    },\r\n                    remove: {\r\n                        particles_nb: 2\r\n                    }\r\n                },\r\n                mouse: {}\r\n            },\r\n            retina_detect: true\r\n        }\r\n    };\r\n\r\n\r\nexport function loadImg(params: IParams, tmp: ITmpParams) {\r\n    let { particles } = params;\r\n\r\n    tmp.img_error = undefined;\r\n\r\n    if (particles.shape.type == 'image' && particles.shape.image.src != '') {\r\n        if (tmp.img_type == 'svg') {\r\n            let xhr: XMLHttpRequest = new XMLHttpRequest();\r\n            xhr.open('GET', particles.shape.image.src);\r\n            xhr.onreadystatechange = (data: any) => {\r\n                if (xhr.readyState == 4) {\r\n                    if (xhr.status == 200) {\r\n                        tmp.source_svg = data.currentTarget.response;\r\n                        if (tmp.source_svg == undefined) {\r\n                            let check: any;\r\n                            tmp.checkAnimFrame = requestAnimationFrame(check);\r\n                        }\r\n                    } else {\r\n                        tmp.img_error = true;\r\n                        throw \"Error : image not found\";\r\n                    }\r\n                }\r\n            };\r\n            xhr.send();\r\n        } else {\r\n            let img: HTMLImageElement = new Image();\r\n            img.addEventListener('load', () => {\r\n                tmp.img_obj = img;\r\n                cancelAnimationFrame(tmp.checkAnimFrame);\r\n            });\r\n            img.src = particles.shape.image.src;\r\n        }\r\n    } else {\r\n        tmp.img_error = true;\r\n        throw \"Error : no image.src\";\r\n    }\r\n}\r\n\r\nexport function createSvgImg(particle: Particle, tmp: ITmpParams): void {\r\n    let svgXml: string = tmp.source_svg;\r\n    let rgbHex: RegExp = /#([0-9A-F]{3,6})/gi;\r\n    let coloredSvgXml: string = svgXml.replace(rgbHex, (m, r, g, b) => {\r\n        let color_value: string;\r\n        if (particle.color.rgb) {\r\n            let { r, g, b } = particle.color.rgb;\r\n            color_value = `rgba( ${r}, ${g}, ${b}, ${particle.opacity} )`;\r\n        } else {\r\n            let { h, s, l } = particle.color.hsl;\r\n            color_value = `rgba( ${h}, ${s}, ${l}, ${particle.opacity} )`;\r\n        }\r\n        return color_value;\r\n    });\r\n\r\n    let svg: Blob = new Blob([coloredSvgXml], {\r\n        type: 'image/svg+xml;charset=utf-8'\r\n    });\r\n\r\n    let DOMURL: any = window.URL || window;\r\n    let url: any = DOMURL.createObjectURL(svg);\r\n\r\n    let img = new Image();\r\n    img.addEventListener('load', () => {\r\n        particle.img.obj = img;\r\n        particle.img.loaded = true;\r\n        DOMURL.revokeObjectURL(url);\r\n        tmp.count_svg++;\r\n    });\r\n    img.src = url;\r\n}","import { Particle } from './particle';\r\nimport { IParams, ICanvasParams } from './interfaces';\r\n\r\nexport class ParticleInteraction {\r\n    constructor() { }\r\n\r\n    linkParticles(p1: Particle, p2: Particle, params: IParams, canvasParams: ICanvasParams): void {\r\n        let dx: number = p1.x - p2.x;\r\n        let dy: number = p1.y - p2.y;\r\n        let dist: number = Math.sqrt(dx * dx + dy * dy);\r\n        let { line_linked } = params.particles;\r\n\r\n        if (dist <= params.particles.line_linked.distance) {\r\n            let opacity_line: number = params.particles.line_linked.opacity - (dist / (1 / params.particles.line_linked.opacity)) / params.particles.line_linked.distance;\r\n            if (opacity_line > 0) {\r\n                let color_line: any = params.particles.line_linked.color_rgb_line;\r\n                let { r, g, b } = color_line;\r\n                canvasParams.ctx.save();\r\n                canvasParams.ctx.strokeStyle = `rgba( ${r}, ${g}, ${b}, ${opacity_line} )`;\r\n                canvasParams.ctx.lineWidth = params.particles.line_linked.width;\r\n\r\n                canvasParams.ctx.beginPath();\r\n                if (line_linked.shadow.enable) {\r\n                    canvasParams.ctx.shadowBlur = line_linked.shadow.blur;\r\n                    canvasParams.ctx.shadowColor = line_linked.shadow.color;\r\n                }\r\n\r\n                canvasParams.ctx.moveTo(p1.x, p1.y);\r\n                canvasParams.ctx.lineTo(p2.x, p2.y);\r\n                canvasParams.ctx.stroke();\r\n                canvasParams.ctx.closePath();\r\n                canvasParams.ctx.restore();\r\n            }\r\n        }\r\n    }\r\n\r\n    attractParticles(p1: Particle, p2: Particle, params: IParams): void {\r\n        let dx: number = p1.x - p2.x;\r\n        let dy: number = p1.y - p2.y;\r\n        let dist: number = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        if (dist <= params.particles.line_linked.distance) {\r\n            let ax = dx / (params.particles.move.attract.rotateX * 1000);\r\n            let ay = dy / (params.particles.move.attract.rotateY * 1000);\r\n\r\n            p1.vx -= ax;\r\n            p1.vy -= ay;\r\n\r\n            p2.vx += ax;\r\n            p2.vy += ay;\r\n        }\r\n    }\r\n\r\n    bounceParticles(p1: Particle, p2: Particle): void {\r\n        let dx: number = p1.x - p2.x;\r\n        let dy: number = p1.y - p2.y;\r\n        let dist: number = Math.sqrt(dx * dx + dy * dy);\r\n        let dist_p: number = p1.radius + p2.radius;\r\n\r\n        if (dist <= dist_p) {\r\n            p1.vx = -p1.vx;\r\n            p1.vy = -p1.vy;\r\n            p2.vx = -p2.vx;\r\n            p2.vy = -p2.vy;\r\n        }\r\n    }\r\n}","import { ICanvasParams, IParams, ITmpParams } from './interfaces';\r\nimport { getColor, createSvgImg } from './utils';\r\n\r\nexport class Particle {\r\n    radius: number;\r\n    radius_bubble: number;\r\n    size_status: boolean;\r\n    vs: number;\r\n\r\n    x: number;\r\n    y: number;\r\n    color: any;\r\n\r\n    opacity: number;\r\n    opacity_bubble: number;\r\n    opacity_status: boolean;\r\n    vo: number;\r\n\r\n    vx: number;\r\n    vy: number;\r\n\r\n    vx_i: number;\r\n    vy_i: number;\r\n\r\n    shape: string;\r\n\r\n    img: { src: string; ratio: number; loaded?: boolean; obj?: any; };\r\n\r\n    constructor(private _canvasParams: ICanvasParams, private _params: IParams, private _tmpParams: ITmpParams, color?: any, opacity?: any, position?: { x: number; y: number; }) {\r\n        this._setupSize();\r\n        this._setupPosition(position);\r\n        this._setupColor(color);\r\n        this._setupOpacity();\r\n        this._setupAnimation();\r\n    }\r\n\r\n    private _setupSize(): void {\r\n        this.radius = (this._params.particles.size.random ? Math.random() : 1) * this._params.particles.size.value;\r\n        if (this._params.particles.size.anim.enable) {\r\n            this.size_status = false;\r\n            this.vs = this._params.particles.size.anim.speed / 100;\r\n            if (!this._params.particles.size.anim.sync)\r\n                this.vs = this.vs * Math.random();\r\n        }\r\n    }\r\n\r\n    private _setupPosition(position?: { x: number; y: number; }): void {\r\n        this.x = position ? position.x : Math.random() * this._canvasParams.width;\r\n        this.y = position ? position.y : Math.random() * this._canvasParams.height;\r\n\r\n        if (this.x > this._canvasParams.width - this.radius * 2) {\r\n            this.x = this.x - this.radius;\r\n        } else if (this.x < this.radius * 2) {\r\n            this.x = this.x + this.radius;\r\n        }\r\n        if (this.y > this._canvasParams.height - this.radius * 2) {\r\n            this.y = this.y - this.radius;\r\n        } else if (this.y < this.radius * 2) {\r\n            this.y = this.y + this.radius;\r\n        }\r\n\r\n        if (this._params.particles.move.bounce) {\r\n            this._checkOverlap(this, position);\r\n        }\r\n    }\r\n\r\n    private _checkOverlap(p1: Particle, position?: { x: number; y: number; }): void {\r\n        let { particles } = this._params;\r\n\r\n        particles.array.forEach((particle: Particle) => {\r\n            let p2: Particle = particle;\r\n\r\n            let dx: number = p1.x - p2.x;\r\n            let dy: number = p1.y - p2.y;\r\n            let dist: number = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (dist <= p1.radius + p2.radius) {\r\n                p1.x = position ? position.x : Math.random() * this._canvasParams.width;\r\n                p1.y = position ? position.y : Math.random() * this._canvasParams.height;\r\n                this._checkOverlap(p1);\r\n            }\r\n        });\r\n    }\r\n\r\n    private _setupColor(color?: any) {\r\n        this.color = getColor(color.value);\r\n    }\r\n\r\n    private _setupOpacity(): void {\r\n        this.opacity = (this._params.particles.opacity.random ? Math.random() : 1) * this._params.particles.opacity.value;\r\n        if (this._params.particles.opacity.anim.enable) {\r\n            this.opacity_status = false;\r\n            this.vo = this._params.particles.opacity.anim.speed / 100;\r\n            if (!this._params.particles.opacity.anim.sync) {\r\n                this.vo = this.vo * Math.random();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setupAnimation(): void {\r\n        let velbase: { x: number; y: number; } = null;\r\n        switch (this._params.particles.move.direction) {\r\n            case 'top':\r\n                velbase = { x: 0, y: -1 };\r\n                break;\r\n            case 'top-right':\r\n                velbase = { x: 0.5, y: -0.5 };\r\n                break;\r\n            case 'right':\r\n                velbase = { x: 1, y: 0 };\r\n                break;\r\n            case 'bottom-right':\r\n                velbase = { Â x: 0.5, y: 0.5 };\r\n                break;\r\n            case 'bottom':\r\n                velbase = { x: 0, y: 1 };\r\n                break;\r\n            case 'bottom-left':\r\n                velbase = { x: -0.5, y: 1 };\r\n                break;\r\n            case 'left':\r\n                velbase = { x: -1, y: 0 };\r\n                break;\r\n            case 'top-left':\r\n                velbase = { Â x: -0.5, y: -0.5 };\r\n                break;\r\n            default:\r\n                velbase = { Â x: 0, y: 0 };\r\n                break;\r\n        }\r\n\r\n        if (this._params.particles.move.straight) {\r\n            this.vx = velbase.x;\r\n            this.vy = velbase.y;\r\n            if (this._params.particles.move.random) {\r\n                this.vx = this.vx * (Math.random());\r\n                this.vy = this.vy * (Math.random());\r\n            }\r\n        } else {\r\n            this.vx = velbase.x + Math.random() - 0.5;\r\n            this.vy = velbase.y + Math.random() - 0.5;\r\n        }\r\n\r\n        this.vx_i = this.vx;\r\n        this.vy_i = this.vy;\r\n\r\n        let shape_type: any = this._params.particles.shape.type;\r\n\r\n        if (typeof (shape_type) == 'object') {\r\n            if (shape_type instanceof Array) {\r\n                let shape_selected: string = shape_type[Math.floor(Math.random() * shape_type.length)];\r\n                this.shape = shape_selected;\r\n            }\r\n        } else {\r\n            this.shape = shape_type;\r\n        }\r\n\r\n        if (this.shape == 'image') {\r\n            let sh: any = this._params.particles.shape;\r\n            this.img = {\r\n                src: sh.image.src,\r\n                ratio: sh.image.width / sh.image.height\r\n            };\r\n\r\n            if (!this.img.ratio)\r\n                this.img.ratio = 1;\r\n            if (this._tmpParams.img_type == 'svg' && this._tmpParams.source_svg != undefined) {\r\n                createSvgImg(this, this._tmpParams);\r\n                if (this._tmpParams.pushing) {\r\n                    this.img.loaded = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawShape(c: CanvasRenderingContext2D, startX: number, startY: number, sideLength: number, sideCountNumerator: number, sideCountDenominator: number): void {\r\n        let sideCount: number = sideCountNumerator * sideCountDenominator;\r\n        let decimalSides: number = sideCountNumerator / sideCountDenominator;\r\n        let interiorAngleDegrees: number = (180 * (decimalSides - 2)) / decimalSides;\r\n        let interiorAngle: number = Math.PI - Math.PI * interiorAngleDegrees / 180;\r\n\r\n        c.save();\r\n        c.beginPath();\r\n        c.translate(startX, startY);\r\n        c.moveTo(0, 0);\r\n\r\n        for (let i = 0; i < sideCount; i++) {\r\n            c.lineTo(sideLength, 0);\r\n            c.translate(sideLength, 0);\r\n            c.rotate(interiorAngle);\r\n        }\r\n\r\n        c.fill();\r\n        c.restore();\r\n    }\r\n\r\n    public draw(): void {\r\n        let { particles } = this._params;\r\n\r\n        let radius: number;\r\n        if (this.radius_bubble != undefined) {\r\n            radius = this.radius_bubble;\r\n        } else {\r\n            radius = this.radius;\r\n        }\r\n\r\n        let opacity: number;\r\n        if (this.opacity_bubble != undefined) {\r\n            opacity = this.opacity_bubble;\r\n        } else {\r\n            opacity = this.opacity;\r\n        }\r\n\r\n        let color_value: string;\r\n\r\n        if (this.color.rgb) {\r\n            let { r, g, b } = this.color.rgb;\r\n            color_value = `rgba( ${r}, ${g}, ${b}, ${opacity} )`;\r\n        } else {\r\n            let { h, s, l } = this.color.hsl;\r\n            color_value = `hsla( ${h}, ${s}, ${l}, ${opacity} )`;\r\n        }\r\n\r\n        this._canvasParams.ctx.fillStyle = color_value;\r\n        this._canvasParams.ctx.beginPath();\r\n\r\n        switch (this.shape) {\r\n            case 'circle':\r\n                this._canvasParams.ctx.arc(this.x, this.y, radius, 0, Math.PI * 2, false);\r\n                break;\r\n\r\n            case 'edge':\r\n                this._canvasParams.ctx.rect(this.x - radius, this.y - radius, radius * 2, radius * 2);\r\n                break;\r\n\r\n            case 'triangle':\r\n                this._drawShape(this._canvasParams.ctx, this.x - radius, this.y + radius / 1.66, radius * 2, 3, 2);\r\n                break;\r\n\r\n            case 'polygon':\r\n                this._drawShape(\r\n                    this._canvasParams.ctx,\r\n                    this.x - radius / (this._params.particles.shape.polygon.nb_sides / 3.5),\r\n                    this.y - radius / (2.66 / 3.5),\r\n                    radius * 2.66 / (this._params.particles.shape.polygon.nb_sides / 3),\r\n                    this._params.particles.shape.polygon.nb_sides,\r\n                    1\r\n                );\r\n                break;\r\n\r\n            case 'star':\r\n                this._drawShape(\r\n                    this._canvasParams.ctx,\r\n                    this.x - radius * 2 / (this._params.particles.shape.polygon.nb_sides / 4),\r\n                    this.y - radius / (2 * 2.66 / 3.5),\r\n                    radius * 2 * 2.66 / (this._params.particles.shape.polygon.nb_sides / 3),\r\n                    this._params.particles.shape.polygon.nb_sides,\r\n                    2\r\n                );\r\n                break;\r\n\r\n            case 'image':\r\n                let draw: (img_obj: any) => void =\r\n                    (img_obj) => {\r\n                        this._canvasParams.ctx.drawImage(\r\n                            img_obj,\r\n                            this.x - radius,\r\n                            this.y - radius,\r\n                            radius * 2,\r\n                            radius * 2 / this.img.ratio\r\n                        );\r\n                    };\r\n                let img_obj: any;\r\n\r\n                if (this._tmpParams.img_type == 'svg') {\r\n                    img_obj = this.img.obj;\r\n                } else {\r\n                    img_obj = this._tmpParams.img_obj;\r\n                }\r\n\r\n                if (img_obj)\r\n                    draw(img_obj);\r\n                break;\r\n        }\r\n\r\n        this._canvasParams.ctx.closePath();\r\n\r\n        if (this._params.particles.shape.stroke.width > 0) {\r\n            this._canvasParams.ctx.strokeStyle = this._params.particles.shape.stroke.color;\r\n            this._canvasParams.ctx.lineWidth = this._params.particles.shape.stroke.width;\r\n            this._canvasParams.ctx.stroke();\r\n        }\r\n\r\n        this._canvasParams.ctx.fill();\r\n    }\r\n}","import { ParticleInteraction } from './particleInteraction';\r\nimport { IParams, ICanvasParams, IMouseParams, ITmpParams } from './interfaces';\r\nimport { Particle } from './particle';\r\nimport { isInArray, clamp } from './utils';\r\n\r\nexport class ParticlesManager {\r\n    private _interaction: ParticleInteraction;\r\n\r\n    constructor(private _canvasParams: ICanvasParams, private _params: IParams, private _tmpParams: ITmpParams) {\r\n        this._interaction = new ParticleInteraction();\r\n    }\r\n\r\n    public particlesCreate(): void {\r\n        let { color, opacity } = this._params.particles;\r\n        for (let i = 0; i < this._params.particles.number.value; i++) {\r\n            this._params.particles.array.push(new Particle(this._canvasParams, this._params, this._tmpParams, color, opacity.value));\r\n        }\r\n    }\r\n\r\n    private _particlesUpdate(): void {\r\n        type Pos = {\r\n            x_left: number;\r\n            x_right: number;\r\n            y_top: number;\r\n            y_bottom: number;\r\n        };\r\n\r\n        this._params.particles.array.forEach((particle: Particle, i: number) => {\r\n            if (this._params.particles.move.enable) {\r\n                let ms = this._params.particles.move.speed / 2;\r\n                particle.x += particle.vx * ms;\r\n                particle.y += particle.vy * ms;\r\n            }\r\n\r\n            if (this._params.particles.opacity.anim.enable) {\r\n                if (particle.opacity_status == true) {\r\n                    if (particle.opacity >= this._params.particles.opacity.value)\r\n                        particle.opacity_status = false;\r\n                    particle.opacity += particle.vo;\r\n                } else {\r\n                    if (particle.opacity <= this._params.particles.opacity.anim.opacity_min)\r\n                        particle.opacity_status = true;\r\n                    particle.opacity -= particle.vo;\r\n                }\r\n                if (particle.opacity < 0)\r\n                    particle.opacity = 0;\r\n            }\r\n\r\n            if (this._params.particles.size.anim.enable) {\r\n                if (particle.size_status == true) {\r\n                    if (particle.radius >= this._params.particles.size.value)\r\n                        particle.size_status = false;\r\n                    particle.radius += particle.vs;\r\n                } else {\r\n                    if (particle.radius <= this._params.particles.size.anim.size_min)\r\n                        particle.size_status = true;\r\n                    particle.radius -= particle.vs;\r\n                }\r\n                if (particle.radius < 0)\r\n                    particle.radius = 0;\r\n            }\r\n\r\n            let new_pos: Pos;\r\n\r\n            if (this._params.particles.move.out_mode == 'bounce') {\r\n                new_pos = {\r\n                    x_left: particle.radius,\r\n                    x_right: this._canvasParams.width,\r\n                    y_top: particle.radius,\r\n                    y_bottom: this._canvasParams.height\r\n                };\r\n            } else {\r\n                new_pos = {\r\n                    x_left: -particle.radius,\r\n                    x_right: this._canvasParams.width + particle.radius,\r\n                    y_top: -particle.radius,\r\n                    y_bottom: this._canvasParams.height + particle.radius\r\n                };\r\n            }\r\n\r\n            if (particle.x - particle.radius > this._canvasParams.width) {\r\n                particle.x = new_pos.x_left;\r\n                particle.y = Math.random() * this._canvasParams.height;\r\n            } else if (particle.x + particle.radius < 0) {\r\n                particle.x = new_pos.x_right;\r\n                particle.y = Math.random() * this._canvasParams.height;\r\n            }\r\n\r\n            if (particle.y - particle.radius > this._canvasParams.height) {\r\n                particle.y = new_pos.y_top;\r\n                particle.x = Math.random() * this._canvasParams.width;\r\n            } else if (particle.y + particle.radius < 0) {\r\n                particle.y = new_pos.y_bottom;\r\n                particle.x = Math.random() * this._canvasParams.width;\r\n            }\r\n\r\n            switch (this._params.particles.move.out_mode) {\r\n                case 'bounce':\r\n                    if (particle.x + particle.radius > this._canvasParams.width)\r\n                        particle.vx = -particle.vx;\r\n                    else if (particle.x - particle.radius < 0)\r\n                        particle.vx = -particle.vx;\r\n                    if (particle.y + particle.radius > this._canvasParams.height)\r\n                        particle.vy = -particle.vy;\r\n                    else if (particle.y - particle.radius < 0)\r\n                        particle.vy = -particle.vy;\r\n                    break;\r\n            }\r\n\r\n            if (isInArray('grab', this._params.interactivity.events.onhover.mode)) {\r\n                this._grabParticle(particle);\r\n            }\r\n\r\n            if (isInArray('bubble', this._params.interactivity.events.onhover.mode) ||\r\n                isInArray('bubble', this._params.interactivity.events.onclick.mode)) {\r\n                this._bubbleParticle(particle);\r\n            }\r\n\r\n            if (isInArray('repulse', this._params.interactivity.events.onhover.mode) ||\r\n                isInArray('repulse', this._params.interactivity.events.onclick.mode)) {\r\n                this._repulseParticle(particle);\r\n            }\r\n\r\n            if (this._params.particles.line_linked.enable || this._params.particles.move.attract.enable) {\r\n                for (let j = i + 1; j < this._params.particles.array.length; j++) {\r\n                    let link = this._params.particles.array[j];\r\n\r\n                    if (this._params.particles.line_linked.enable)\r\n                        this._interaction.linkParticles(particle, link, this._params, this._canvasParams);\r\n\r\n                    if (this._params.particles.move.attract.enable)\r\n                        this._interaction.attractParticles(particle, link, this._params);\r\n\r\n                    if (this._params.particles.move.bounce)\r\n                        this._interaction.bounceParticles(particle, link);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public particlesDraw(): void {\r\n        this._canvasParams.ctx.clearRect(0, 0, this._canvasParams.width, this._canvasParams.height);\r\n        this._particlesUpdate();\r\n\r\n        this._params.particles.array.forEach((particle: Particle) => {\r\n            particle.draw();\r\n        });\r\n    }\r\n\r\n    public particlesEmpty(): void {\r\n        this._params.particles.array = [];\r\n    }\r\n\r\n    public removeParticles(nb: number): void {\r\n        this._params.particles.array.splice(0, nb);\r\n\r\n        if (!this._params.particles.move.enable) {\r\n            this.particlesDraw();\r\n        }\r\n    }\r\n\r\n    public pushParticles(nb: number, pos?: IMouseParams): void {\r\n        this._tmpParams.pushing = true;\r\n\r\n        for (let i = 0; i < nb; i++) {\r\n            this._params.particles.array.push(\r\n                new Particle(\r\n                    this._canvasParams,\r\n                    this._params,\r\n                    this._tmpParams,\r\n                    this._params.particles.color,\r\n                    this._params.particles.opacity.value,\r\n                    {\r\n                        x: pos ? pos.pos_x : Math.random() * this._canvasParams.width,\r\n                        y: pos ? pos.pos_y : Math.random() * this._canvasParams.height\r\n                    })\r\n            );\r\n\r\n            if (i == nb - 1) {\r\n                if (!this._params.particles.move.enable) {\r\n                    this.particlesDraw();\r\n                }\r\n                this._tmpParams.pushing = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _bubbleParticle(particle: Particle) {\r\n        if (this._params.interactivity.events.onhover.enable &&\r\n            isInArray('bubble', this._params.interactivity.events.onhover.mode)) {\r\n\r\n            let dx_mouse: number = particle.x - this._params.interactivity.mouse.pos_x;\r\n            let dy_mouse: number = particle.y - this._params.interactivity.mouse.pos_y;\r\n            let dist_mouse: number = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n            let ratio: number = 1 - dist_mouse / this._params.interactivity.modes.bubble.distance;\r\n\r\n            let init: () => void =\r\n                () => {\r\n                    particle.opacity_bubble = particle.opacity;\r\n                    particle.radius_bubble = particle.radius;\r\n                };\r\n\r\n            if (dist_mouse <= this._params.interactivity.modes.bubble.distance) {\r\n                if (ratio >= 0 && this._params.interactivity.status == 'mousemove') {\r\n\r\n                    if (this._params.interactivity.modes.bubble.size != this._params.particles.size.value) {\r\n                        if (this._params.interactivity.modes.bubble.size > this._params.particles.size.value) {\r\n                            let size: number = particle.radius + (this._params.interactivity.modes.bubble.size * ratio);\r\n                            if (size >= 0) {\r\n                                particle.radius_bubble = size;\r\n                            }\r\n                        } else {\r\n                            let dif: number = particle.radius - this._params.interactivity.modes.bubble.size;\r\n                            let size: number = particle.radius - (dif * ratio);\r\n                            if (size > 0) {\r\n                                particle.radius_bubble = size;\r\n                            } else {\r\n                                particle.radius_bubble = 0;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this._params.interactivity.modes.bubble.opacity != this._params.particles.opacity.value) {\r\n                        if (this._params.interactivity.modes.bubble.opacity > this._params.particles.opacity.value) {\r\n                            let opacity: number = this._params.interactivity.modes.bubble.opacity * ratio;\r\n                            if (opacity > particle.opacity && opacity <= this._params.interactivity.modes.bubble.opacity) {\r\n                                particle.opacity_bubble = opacity;\r\n                            }\r\n                        } else {\r\n                            let opacity: number = particle.opacity - (this._params.particles.opacity.value - this._params.interactivity.modes.bubble.opacity) * ratio;\r\n                            if (opacity < particle.opacity && opacity >= this._params.interactivity.modes.bubble.opacity) {\r\n                                particle.opacity_bubble = opacity;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                init();\r\n            }\r\n\r\n            if (this._params.interactivity.status == 'mouseleave') {\r\n                init();\r\n            }\r\n\r\n        } else if (this._params.interactivity.events.onclick.enable &&\r\n            isInArray('bubble', this._params.interactivity.events.onclick.mode)) {\r\n\r\n            if (this._tmpParams.bubble_clicking) {\r\n                let dx_mouse: number = particle.x - this._params.interactivity.mouse.click_pos_x;\r\n                let dy_mouse: number = particle.y - this._params.interactivity.mouse.click_pos_y;\r\n                let dist_mouse: number = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n                let time_spent: number = (new Date().getTime() - this._params.interactivity.mouse.click_time) / 1000;\r\n\r\n                if (time_spent > this._params.interactivity.modes.bubble.duration) {\r\n                    this._tmpParams.bubble_duration_end = true;\r\n                }\r\n\r\n                if (time_spent > this._params.interactivity.modes.bubble.duration * 2) {\r\n                    this._tmpParams.bubble_clicking = false;\r\n                    this._tmpParams.bubble_duration_end = false;\r\n                }\r\n\r\n                let process: any = (bubble_param: any, particles_param: any, p_obj_bubble: any, p_obj: any, id: any) => {\r\n                    if (bubble_param != particles_param) {\r\n                        if (!this._tmpParams.bubble_duration_end) {\r\n                            if (dist_mouse <= this._params.interactivity.modes.bubble.distance) {\r\n                                let obj: any;\r\n                                if (p_obj_bubble != undefined) {\r\n                                    obj = p_obj_bubble;\r\n                                } else {\r\n                                    obj = p_obj;\r\n                                }\r\n                                if (obj != bubble_param) {\r\n                                    let value: any = p_obj - (time_spent * (p_obj - bubble_param) / this._params.interactivity.modes.bubble.duration);\r\n                                    if (id == 'size')\r\n                                        particle.radius_bubble = value;\r\n                                    if (id == 'opacity')\r\n                                        particle.opacity_bubble = value;\r\n                                }\r\n                            } else {\r\n                                if (id == 'size')\r\n                                    particle.radius_bubble = undefined;\r\n                                if (id == 'opacity')\r\n                                    particle.opacity_bubble = undefined;\r\n                            }\r\n                        } else {\r\n                            if (p_obj_bubble != undefined) {\r\n                                let value_tmp: any = p_obj - (time_spent * (p_obj - bubble_param) / this._params.interactivity.modes.bubble.duration);\r\n                                let dif: any = bubble_param - value_tmp;\r\n                                let value: any = bubble_param + dif;\r\n                                if (id == 'size')\r\n                                    particle.radius_bubble = value;\r\n                                if (id == 'opacity')\r\n                                    particle.opacity_bubble = value;\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if (this._tmpParams.bubble_clicking) {\r\n                    process(this._params.interactivity.modes.bubble.size, this._params.particles.size.value, particle.radius_bubble, particle.radius, 'size');\r\n                    process(this._params.interactivity.modes.bubble.opacity, this._params.particles.opacity.value, particle.opacity_bubble, particle.opacity, 'opacity');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _repulseParticle(particle: Particle) {\r\n        if (this._params.interactivity.events.onhover.enable &&\r\n            isInArray('repulse', this._params.interactivity.events.onhover.mode) &&\r\n            this._params.interactivity.status == 'mousemove') {\r\n\r\n            let dx_mouse: number = particle.x - this._params.interactivity.mouse.pos_x;\r\n            let dy_mouse: number = particle.y - this._params.interactivity.mouse.pos_y;\r\n            let dist_mouse: number = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n\r\n            let normVec: any = { x: dx_mouse / dist_mouse, y: dy_mouse / dist_mouse };\r\n            let repulseRadius: number = this._params.interactivity.modes.repulse.distance;\r\n            let velocity: number = 100;\r\n            let repulseFactor: number = clamp((1 / repulseRadius) * (-1 * Math.pow(dist_mouse / repulseRadius, 2) + 1) * repulseRadius * velocity, 0, 50);\r\n\r\n            let pos = {\r\n                x: particle.x + normVec.x * repulseFactor,\r\n                y: particle.y + normVec.y * repulseFactor\r\n            }\r\n\r\n            if (this._params.particles.move.out_mode == 'bounce') {\r\n                if (pos.x - particle.radius > 0 && pos.x + particle.radius < this._canvasParams.width)\r\n                    particle.x = pos.x;\r\n                if (pos.y - particle.radius > 0 && pos.y + particle.radius < this._canvasParams.height)\r\n                    particle.y = pos.y;\r\n            } else {\r\n                particle.x = pos.x;\r\n                particle.y = pos.y;\r\n            }\r\n\r\n        } else if (this._params.interactivity.events.onclick.enable &&\r\n            isInArray('repulse', this._params.interactivity.events.onclick.mode)) {\r\n\r\n            if (!this._tmpParams.repulse_finish) {\r\n                this._tmpParams.repulse_count++;\r\n                if (this._tmpParams.repulse_count == this._params.particles.array.length)\r\n                    this._tmpParams.repulse_finish = true;\r\n            }\r\n\r\n            if (this._tmpParams.repulse_clicking) {\r\n\r\n                let repulseRadius: number = Math.pow(this._params.interactivity.modes.repulse.distance / 6, 3);\r\n\r\n                let dx: number = this._params.interactivity.mouse.click_pos_x - particle.x;\r\n                let dy: number = this._params.interactivity.mouse.click_pos_y - particle.y;\r\n                let d: number = dx * dx + dy * dy;\r\n\r\n                let force: number = -repulseRadius / d * 1;\r\n\r\n                let process: () => void =\r\n                    () => {\r\n                        let f: number = Math.atan2(dy, dx);\r\n                        particle.vx = force * Math.cos(f);\r\n                        particle.vy = force * Math.sin(f);\r\n                        if (this._params.particles.move.out_mode == 'bounce') {\r\n                            let pos: {\r\n                                x: number;\r\n                                y: number;\r\n                            } = {\r\n                                    x: particle.x + particle.vx,\r\n                                    y: particle.y + particle.vy\r\n                                }\r\n                            if (pos.x + particle.radius > this._canvasParams.width)\r\n                                particle.vx = -particle.vx;\r\n                            else if (pos.x - particle.radius < 0)\r\n                                particle.vx = -particle.vx;\r\n                            if (pos.y + particle.radius > this._canvasParams.height)\r\n                                particle.vy = -particle.vy;\r\n                            else if (pos.y - particle.radius < 0)\r\n                                particle.vy = -particle.vy;\r\n                        }\r\n                    };\r\n\r\n                if (d <= repulseRadius) {\r\n                    process();\r\n                }\r\n            } else {\r\n                if (this._tmpParams.repulse_clicking == false) {\r\n                    particle.vx = particle.vx_i;\r\n                    particle.vy = particle.vy_i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _grabParticle(particle: Particle): void {\r\n        let { interactivity, particles } = this._params;\r\n\r\n        if (interactivity.events.onhover.enable &&\r\n            interactivity.status == 'mousemove') {\r\n\r\n            let dx_mouse: number = particle.x - interactivity.mouse.pos_x;\r\n            let dy_mouse: number = particle.y - interactivity.mouse.pos_y;\r\n            let dist_mouse: number = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n\r\n            if (dist_mouse <= interactivity.modes.grab.distance) {\r\n\r\n                let { grab } = interactivity.modes;\r\n\r\n                let opacity_line: number = grab.line_linked.opacity - (dist_mouse / (1 / grab.line_linked.opacity)) / grab.distance;\r\n\r\n                if (opacity_line > 0) {\r\n                    let color_line: {\r\n                        r: number;\r\n                        g: number;\r\n                        b: number;\r\n                    } = particles.line_linked.color_rgb_line;\r\n\r\n                    let { r, g, b } = color_line;\r\n                    this._canvasParams.ctx.strokeStyle = `rgba( ${r}, ${g}, ${b}, ${opacity_line} )`;\r\n                    this._canvasParams.ctx.lineWidth = particles.line_linked.width;\r\n\r\n                    this._canvasParams.ctx.beginPath();\r\n                    this._canvasParams.ctx.moveTo(particle.x, particle.y);\r\n                    this._canvasParams.ctx.lineTo(interactivity.mouse.pos_x, interactivity.mouse.pos_y);\r\n                    this._canvasParams.ctx.stroke();\r\n                    this._canvasParams.ctx.closePath();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { ParticlesManager } from './particlesManager';\r\nimport { ICanvasParams, IParams, ITmpParams } from './interfaces';\r\nimport { hexToRgb } from './utils';\r\n\r\nexport class CanvasManager {\r\n    public particlesManager: ParticlesManager;\r\n\r\n    constructor(private _canvasParams: ICanvasParams, private _params: IParams, private _tmpParams: ITmpParams) {\r\n        this._onWindowResize = this._onWindowResize.bind(this);\r\n\r\n        this._retinaInit();\r\n        this._canvasSize();\r\n\r\n        this.particlesManager = new ParticlesManager(this._canvasParams, this._params, this._tmpParams);\r\n        this.particlesManager.particlesCreate();\r\n\r\n        this._densityAutoParticles();\r\n\r\n        let { particles } = this._params;\r\n        particles.line_linked.color_rgb_line = hexToRgb(particles.line_linked.color);\r\n    }\r\n\r\n    public cancelAnimation(): void {\r\n        if (!this._tmpParams.drawAnimFrame) {\r\n            return;\r\n        }\r\n        cancelAnimationFrame(this._tmpParams.drawAnimFrame);\r\n        this._tmpParams.drawAnimFrame = null;\r\n    }\r\n\r\n    public draw(): void {\r\n        let { particles } = this._params;\r\n\r\n        if (particles.shape.type == 'image') {\r\n            if (this._tmpParams.img_type == 'svg') {\r\n                if (this._tmpParams.count_svg >= particles.number.value) {\r\n                    this.particlesManager.particlesDraw();\r\n                    if (!particles.move.enable) {\r\n                        cancelAnimationFrame(this._tmpParams.drawAnimFrame);\r\n                    } else {\r\n                        this._tmpParams.drawAnimFrame = requestAnimationFrame(this.draw.bind(this));\r\n                    }\r\n                } else {\r\n                    if (!this._tmpParams.img_error) {\r\n                        this._tmpParams.drawAnimFrame = requestAnimationFrame(this.draw.bind(this));\r\n                    }\r\n                }\r\n            } else {\r\n                if (this._tmpParams.img_obj != undefined) {\r\n                    this.particlesManager.particlesDraw();\r\n                    if (!particles.move.enable) {\r\n                        cancelAnimationFrame(this._tmpParams.drawAnimFrame);\r\n                    } else {\r\n                        this._tmpParams.drawAnimFrame = requestAnimationFrame(this.draw.bind(this));\r\n                    }\r\n                } else {\r\n                    if (!this._tmpParams.img_error) {\r\n                        this._tmpParams.drawAnimFrame = requestAnimationFrame(this.draw.bind(this));\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.particlesManager.particlesDraw();\r\n\r\n            if (!particles.move.enable) {\r\n                cancelAnimationFrame(this._tmpParams.drawAnimFrame);\r\n            } else {\r\n                this._tmpParams.drawAnimFrame = requestAnimationFrame(this.draw.bind(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    private _densityAutoParticles(): void {\r\n        let { particles } = this._params;\r\n\r\n        if (particles.number.density.enable) {\r\n            let area: number = this._canvasParams.el.width * this._canvasParams.el.height / 1000;\r\n\r\n            if (this._tmpParams.retina) {\r\n                area = area / (this._canvasParams.pxratio * 2);\r\n            }\r\n\r\n            let nb_particles: number = area * particles.number.value / particles.number.density.value_area;\r\n\r\n            let missing_particles: number = particles.array.length - nb_particles;\r\n\r\n            if (missing_particles < 0) {\r\n                this.particlesManager.pushParticles(Math.abs(missing_particles));\r\n            } else {\r\n                this.particlesManager.removeParticles(missing_particles);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _retinaInit(): void {\r\n        if (this._params.retina_detect && window.devicePixelRatio > 1) {\r\n            this._canvasParams.pxratio = window.devicePixelRatio;\r\n            this._tmpParams.retina = true;\r\n\r\n            this._canvasParams.width = this._canvasParams.el.offsetWidth * this._canvasParams.pxratio;\r\n            this._canvasParams.height = this._canvasParams.el.offsetHeight * this._canvasParams.pxratio;\r\n\r\n            this._params.particles.size.value = this._tmpParams.obj.size_value * this._canvasParams.pxratio;\r\n            this._params.particles.size.anim.speed = this._tmpParams.obj.size_anim_speed * this._canvasParams.pxratio;\r\n            this._params.particles.move.speed = this._tmpParams.obj.move_speed * this._canvasParams.pxratio;\r\n            this._params.particles.line_linked.distance = this._tmpParams.obj.line_linked_distance * this._canvasParams.pxratio;\r\n            this._params.interactivity.modes.grab.distance = this._tmpParams.obj.mode_grab_distance * this._canvasParams.pxratio;\r\n            this._params.interactivity.modes.bubble.distance = this._tmpParams.obj.mode_bubble_distance * this._canvasParams.pxratio;\r\n            this._params.particles.line_linked.width = this._tmpParams.obj.line_linked_width * this._canvasParams.pxratio;\r\n            this._params.interactivity.modes.bubble.size = this._tmpParams.obj.mode_bubble_size * this._canvasParams.pxratio;\r\n            this._params.interactivity.modes.repulse.distance = this._tmpParams.obj.mode_repulse_distance * this._canvasParams.pxratio;\r\n\r\n        } else {\r\n            this._canvasParams.pxratio = 1;\r\n            this._tmpParams.retina = false;\r\n        }\r\n    }\r\n\r\n    private _canvasClear(): void {\r\n        this._canvasParams.ctx.clearRect(0, 0, this._canvasParams.width, this._canvasParams.height);\r\n    }\r\n\r\n    private _canvasPaint(): void {\r\n        this._canvasParams.ctx.fillRect(0, 0, this._canvasParams.width, this._canvasParams.height);\r\n    }\r\n\r\n    private _canvasSize(): void {\r\n        this._canvasParams.el.width = this._canvasParams.width;\r\n        this._canvasParams.el.height = this._canvasParams.height;\r\n\r\n        if (this._params && this._params.interactivity.events.resize) {\r\n            window.addEventListener('resize', this._onWindowResize);\r\n        }\r\n    }\r\n\r\n    private _onWindowResize(): void {\r\n        this._canvasParams.width = this._canvasParams.el.offsetWidth;\r\n        this._canvasParams.height = this._canvasParams.el.offsetHeight;\r\n\r\n        if (this._tmpParams.retina) {\r\n            this._canvasParams.width *= this._canvasParams.pxratio;\r\n            this._canvasParams.height *= this._canvasParams.pxratio;\r\n        }\r\n\r\n        this._canvasParams.el.width = this._canvasParams.width;\r\n        this._canvasParams.el.height = this._canvasParams.height;\r\n\r\n        if (!this._params.particles.move.enable) {\r\n            this.particlesManager.particlesEmpty();\r\n            this.particlesManager.particlesCreate();\r\n            this.particlesManager.particlesDraw();\r\n            this._densityAutoParticles();\r\n        }\r\n\r\n        this._densityAutoParticles();\r\n    }\r\n}\r\n","import { Directive, ElementRef, AfterViewInit, HostListener, Input, OnDestroy } from \"@angular/core\";\r\nimport { CanvasManager, ICanvasParams, IParams, ITmpParams, getDefaultParams, isInArray, deepExtend, loadImg } from './models';\r\n\r\n@Directive({\r\n    selector: '[d-particles]'\r\n})\r\nexport class ParticlesDirective implements AfterViewInit, OnDestroy  {\r\n    @Input() set params(value: IParams) {\r\n        let defaultParams: IParams = getDefaultParams();\r\n        this._params = deepExtend(defaultParams, value);\r\n    }\r\n\r\n    constructor(private el: ElementRef) { }\r\n\r\n    private _canvasParams: ICanvasParams;\r\n    private _params: IParams;\r\n    private _tmpParams: ITmpParams = {};\r\n    private _canvasManager: CanvasManager;\r\n\r\n    ngOnDestroy(): void {\r\n        if (!this._canvasManager) {\r\n            return;\r\n        }\r\n        this._canvasManager.cancelAnimation();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this._canvasParams = {\r\n            el: this.el.nativeElement,\r\n            ctx: this.el.nativeElement.getContext('2d'),\r\n            width: this.el.nativeElement.offsetWidth,\r\n            height: this.el.nativeElement.offsetHeight\r\n        };\r\n\r\n        this._tmpParams.obj = {\r\n            size_value: this._params.particles.size.value,\r\n            size_anim_speed: this._params.particles.size.anim.speed,\r\n            move_speed: this._params.particles.move.speed,\r\n            line_linked_distance: this._params.particles.line_linked.distance,\r\n            line_linked_width: this._params.particles.line_linked.width,\r\n            mode_grab_distance: this._params.interactivity.modes.grab.distance,\r\n            mode_bubble_distance: this._params.interactivity.modes.bubble.distance,\r\n            mode_bubble_size: this._params.interactivity.modes.bubble.size,\r\n            mode_repulse_distance: this._params.interactivity.modes.repulse.distance\r\n        };\r\n\r\n        this._params.interactivity.el = (this._params.interactivity.detect_on == 'window') ? window : this._canvasParams.el;\r\n\r\n        if (isInArray('image', this._params.particles.shape.type)) {\r\n            this._tmpParams.img_type = this._params.particles.shape.image.src.substr(this._params.particles.shape.image.src.length - 3);\r\n            loadImg(this._params, this._tmpParams);\r\n        }\r\n\r\n        this._canvasManager = new CanvasManager(this._canvasParams, this._params, this._tmpParams);\r\n        this._canvasManager.draw();\r\n    }\r\n\r\n    /**\r\n     * Mouse move event\r\n     * @param event\r\n     */\r\n    @HostListener('mousemove', ['$event']) onMouseMove(event) {\r\n        let { interactivity } = this._params;\r\n\r\n        if (interactivity.events.onhover.enable ||\r\n            interactivity.events.onclick.enable) {\r\n\r\n            let pos: {\r\n                x: number;\r\n                y: number;\r\n            };\r\n\r\n            if (interactivity.el == window) {\r\n                pos = {\r\n                    x: event.clientX,\r\n                    y: event.clientY\r\n                };\r\n            } else {\r\n                pos = {\r\n                    x: event.offsetX || event.clientX,\r\n                    y: event.offsetY || event.clientY\r\n                };\r\n            }\r\n\r\n            interactivity.mouse.pos_x = pos.x;\r\n            interactivity.mouse.pos_y = pos.y;\r\n\r\n            if (this._tmpParams.retina) {\r\n                interactivity.mouse.pos_x *= this._canvasParams.pxratio;\r\n                interactivity.mouse.pos_y *= this._canvasParams.pxratio;\r\n            }\r\n\r\n            interactivity.status = 'mousemove';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mouse leave event\r\n     */\r\n    @HostListener('mouseleave') onMouseLeave() {\r\n        let { interactivity } = this._params;\r\n\r\n        if (interactivity.events.onhover.enable ||\r\n            interactivity.events.onclick.enable) {\r\n\r\n            interactivity.mouse.pos_x = null;\r\n            interactivity.mouse.pos_y = null;\r\n            interactivity.status = 'mouseleave';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Click event\r\n     */\r\n    @HostListener('click') onClick() {\r\n        let { interactivity, particles } = this._params;\r\n\r\n        if (interactivity.events.onclick.enable) {\r\n            interactivity.mouse.click_pos_x = interactivity.mouse.pos_x;\r\n            interactivity.mouse.click_pos_y = interactivity.mouse.pos_y;\r\n            interactivity.mouse.click_time = new Date().getTime();\r\n\r\n            switch (interactivity.events.onclick.mode) {\r\n                case 'push':\r\n                    if (particles.move.enable) {\r\n                        this._canvasManager.particlesManager.pushParticles(interactivity.modes.push.particles_nb, interactivity.mouse);\r\n                    } else {\r\n                        if (interactivity.modes.push.particles_nb == 1) {\r\n                            this._canvasManager.particlesManager.pushParticles(interactivity.modes.push.particles_nb, interactivity.mouse);\r\n                        } else if (interactivity.modes.push.particles_nb > 1) {\r\n                            this._canvasManager.particlesManager.pushParticles(interactivity.modes.push.particles_nb);\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 'remove':\r\n                    this._canvasManager.particlesManager.removeParticles(interactivity.modes.remove.particles_nb);\r\n                    break;\r\n\r\n                case 'bubble':\r\n                    this._tmpParams.bubble_clicking = true;\r\n                    break;\r\n\r\n                case 'repulse':\r\n                    this._tmpParams.repulse_clicking = true;\r\n                    this._tmpParams.repulse_count = 0;\r\n                    this._tmpParams.repulse_finish = false;\r\n                    setTimeout(() => {\r\n                        this._tmpParams.repulse_clicking = false;\r\n                    }, interactivity.modes.repulse.duration * 1000);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ParticlesComponent } from './particles.component';\r\nimport { ParticlesDirective } from './particles.directive';\r\n\r\nexport * from './particles.component';\r\nexport * from './particles.directive';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        ParticlesComponent,\r\n        ParticlesDirective\r\n    ],\r\n    exports: [\r\n        ParticlesComponent,\r\n        ParticlesDirective\r\n    ]\r\n})\r\nexport class ParticlesModule { }"]}