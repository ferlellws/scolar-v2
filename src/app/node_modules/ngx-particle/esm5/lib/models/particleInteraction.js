var ParticleInteraction = /** @class */ (function () {
    function ParticleInteraction() {
    }
    ParticleInteraction.prototype.linkParticles = function (p1, p2, params, canvasParams) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        var dist = Math.sqrt(dx * dx + dy * dy);
        var line_linked = params.particles.line_linked;
        if (dist <= params.particles.line_linked.distance) {
            var opacity_line = params.particles.line_linked.opacity - (dist / (1 / params.particles.line_linked.opacity)) / params.particles.line_linked.distance;
            if (opacity_line > 0) {
                var color_line = params.particles.line_linked.color_rgb_line;
                var r = color_line.r, g = color_line.g, b = color_line.b;
                canvasParams.ctx.save();
                canvasParams.ctx.strokeStyle = "rgba( " + r + ", " + g + ", " + b + ", " + opacity_line + " )";
                canvasParams.ctx.lineWidth = params.particles.line_linked.width;
                canvasParams.ctx.beginPath();
                if (line_linked.shadow.enable) {
                    canvasParams.ctx.shadowBlur = line_linked.shadow.blur;
                    canvasParams.ctx.shadowColor = line_linked.shadow.color;
                }
                canvasParams.ctx.moveTo(p1.x, p1.y);
                canvasParams.ctx.lineTo(p2.x, p2.y);
                canvasParams.ctx.stroke();
                canvasParams.ctx.closePath();
                canvasParams.ctx.restore();
            }
        }
    };
    ParticleInteraction.prototype.attractParticles = function (p1, p2, params) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        var dist = Math.sqrt(dx * dx + dy * dy);
        if (dist <= params.particles.line_linked.distance) {
            var ax = dx / (params.particles.move.attract.rotateX * 1000);
            var ay = dy / (params.particles.move.attract.rotateY * 1000);
            p1.vx -= ax;
            p1.vy -= ay;
            p2.vx += ax;
            p2.vy += ay;
        }
    };
    ParticleInteraction.prototype.bounceParticles = function (p1, p2) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        var dist = Math.sqrt(dx * dx + dy * dy);
        var dist_p = p1.radius + p2.radius;
        if (dist <= dist_p) {
            p1.vx = -p1.vx;
            p1.vy = -p1.vy;
            p2.vx = -p2.vx;
            p2.vy = -p2.vy;
        }
    };
    return ParticleInteraction;
}());
export { ParticleInteraction };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljbGVJbnRlcmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wYXJ0aWNsZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvcGFydGljbGVJbnRlcmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTtJQUNJO0lBQWdCLENBQUM7SUFFakIsMkNBQWEsR0FBYixVQUFjLEVBQVksRUFBRSxFQUFZLEVBQUUsTUFBZSxFQUFFLFlBQTJCO1FBQ2xGLElBQUksRUFBRSxHQUFXLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLEVBQUUsR0FBVyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxJQUFJLEdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxQyxJQUFBLDBDQUFXLENBQXNCO1FBRXZDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtZQUMvQyxJQUFJLFlBQVksR0FBVyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7WUFDOUosSUFBSSxZQUFZLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixJQUFJLFVBQVUsR0FBUSxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7Z0JBQzVELElBQUEsZ0JBQUMsRUFBRSxnQkFBQyxFQUFFLGdCQUFDLENBQWdCO2dCQUM3QixZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN4QixZQUFZLENBQUMs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LEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ2YsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDbEI7SUFDTCxDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBL0RELElBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFydGljbGUgfSBmcm9tICcuL3BhcnRpY2xlJztcclxuaW1wb3J0IHsgSVBhcmFtcywgSUNhbnZhc1BhcmFtcyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFydGljbGVJbnRlcmFjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIGxpbmtQYXJ0aWNsZXMocDE6IFBhcnRpY2xlLCBwMjogUGFydGljbGUsIHBhcmFtczogSVBhcmFtcywgY2FudmFzUGFyYW1zOiBJQ2FudmFzUGFyYW1zKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGR4OiBudW1iZXIgPSBwMS54IC0gcDIueDtcclxuICAgICAgICBsZXQgZHk6IG51bWJlciA9IHAxLnkgLSBwMi55O1xyXG4gICAgICAgIGxldCBkaXN0OiBudW1iZXIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xyXG4gICAgICAgIGxldCB7IGxpbmVfbGlua2VkIH0gPSBwYXJhbXMucGFydGljbGVzO1xyXG5cclxuICAgICAgICBpZiAoZGlzdCA8PSBwYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLmRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGxldCBvcGFjaXR5X2xpbmU6IG51bWJlciA9IHBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQub3BhY2l0eSAtIChkaXN0IC8gKDEgLyBwYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLm9wYWNpdHkpKSAvIHBhcmFtcy5wYXJ0aWNsZXMubGluZV9saW5rZWQuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIGlmIChvcGFjaXR5X2xpbmUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sb3JfbGluZTogYW55ID0gcGFyYW1zLnBhcnRpY2xlcy5saW5lX2xpbmtlZC5jb2xvcl9yZ2JfbGluZTtcclxuICAgICAgICAgICAgICAgIGxldCB7IHIsIGcsIGIgfSA9IGNvbG9yX2xpbmU7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNQYXJhbXMuY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgICAgIGNhbnZhc1BhcmFtcy5jdHguc3Ryb2tlU3R5bGUgPSBgcmdiYSggJHtyfSwgJHtnfSwgJHtifSwgJHtvcGFjaXR5X2xpbmV9IClgO1xyXG4gICAgICAgICAgICAgICAgY2FudmFzUGFyYW1zLmN0eC5saW5lV2lkdGggPSBwYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhbnZhc1BhcmFtcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZV9saW5rZWQuc2hhZG93LmVuYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc1BhcmFtcy5jdHguc2hhZG93Qmx1ciA9IGxpbmVfbGlua2VkLnNoYWRvdy5ibHVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc1BhcmFtcy5jdHguc2hhZG93Q29sb3IgPSBsaW5lX2xpbmtlZC5zaGFkb3cuY29sb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY2FudmFzUGFyYW1zLmN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNQYXJhbXMuY3R4LmxpbmVUbyhwMi54LCBwMi55KTtcclxuICAgICAgICAgICAgICAgIGNhbnZhc1BhcmFtcy5jdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNQYXJhbXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY2FudmFzUGFyYW1zLmN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXR0cmFjdFBhcnRpY2xlcyhwMTogUGFydGljbGUsIHAyOiBQYXJ0aWNsZSwgcGFyYW1zOiBJUGFyYW1zKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGR4OiBudW1iZXIgPSBwMS54IC0gcDIueDtcclxuICAgICAgICBsZXQgZHk6IG51bWJlciA9IHAxLnkgLSBwMi55O1xyXG4gICAgICAgIGxldCBkaXN0OiBudW1iZXIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xyXG5cclxuICAgICAgICBpZiAoZGlzdCA8PSBwYXJhbXMucGFydGljbGVzLmxpbmVfbGlua2VkLmRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGxldCBheCA9IGR4IC8gKHBhcmFtcy5wYXJ0aWNsZXMubW92ZS5hdHRyYWN0LnJvdGF0ZVggKiAxMDAwKTtcclxuICAgICAgICAgICAgbGV0IGF5ID0gZHkgLyAocGFyYW1zLnBhcnRpY2xlcy5tb3ZlLmF0dHJhY3Qucm90YXRlWSAqIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgcDEudnggLT0gYXg7XHJcbiAgICAgICAgICAgIHAxLnZ5IC09IGF5O1xyXG5cclxuICAgICAgICAgICAgcDIudnggKz0gYXg7XHJcbiAgICAgICAgICAgIHAyLnZ5ICs9IGF5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBib3VuY2VQYXJ0aWNsZXMocDE6IFBhcnRpY2xlLCBwMjogUGFydGljbGUpOiB2b2lkIHtcclxuICAgICAgICBsZXQgZHg6IG51bWJlciA9IHAxLnggLSBwMi54O1xyXG4gICAgICAgIGxldCBkeTogbnVtYmVyID0gcDEueSAtIHAyLnk7XHJcbiAgICAgICAgbGV0IGRpc3Q6IG51bWJlciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgICAgICAgbGV0IGRpc3RfcDogbnVtYmVyID0gcDEucmFkaXVzICsgcDIucmFkaXVzO1xyXG5cclxuICAgICAgICBpZiAoZGlzdCA8PSBkaXN0X3ApIHtcclxuICAgICAgICAgICAgcDEudnggPSAtcDEudng7XHJcbiAgICAgICAgICAgIHAxLnZ5ID0gLXAxLnZ5O1xyXG4gICAgICAgICAgICBwMi52eCA9IC1wMi52eDtcclxuICAgICAgICAgICAgcDIudnkgPSAtcDIudnk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19